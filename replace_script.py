from bs4 import BeautifulSoup
import re

def apply_html_change(
        html_path: str,
        span_text: str,
        new_html_block: str
    ) -> bool:
        """
        –í html_path –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π <span>, —á–µ–π .get_text(strip=True) == span_text,
        –±–µ—Ä—ë—Ç –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π <a> –∏ –∑–∞–º–µ–Ω—è–µ—Ç —ç—Ç–æ—Ç <a> –Ω–∞ new_html_block.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∏–Ω–∞—á–µ False.
        """
        # ---------- —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ----------
        with open(html_path, "r", encoding="utf-8") as f:
            soup = BeautifulSoup(f, "html.parser")

        # ---------- —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç ----------
        new_anchor = BeautifulSoup(new_html_block, "html.parser").find("a")
        if new_anchor is None:
            print("‚ùå new_html_block –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç <a>‚Ä¶</a>")
            return False

        # ---------- –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π <span> –∏ –µ–≥–æ <a> ----------
        for span in soup.find_all("span"):
            if span.get_text(strip=True) == span_text:
                anchor = span.find_parent("a")
                if anchor:
                    print("üïµÔ∏è –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π <a>:\n", anchor, "\n")

                    # –∫–ª–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
                    replacement = BeautifulSoup(str(new_anchor), "html.parser").find("a")

                    # ---------- –∑–∞–º–µ–Ω–∏—Ç—å ----------
                    anchor.replace_with(replacement)
                    print("üéâ –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞:\n", replacement, "\n")

                    # ---------- —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ----------
                    with open(html_path, "w", encoding="utf-8") as f:
                        f.write(str(soup))
                    print(f"‚úÖ –ó–∞–º–µ–Ω–∏–ª–∏ —Å—Å—ã–ª–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º ¬´{span_text}¬ª")
                    return True

        print(f"‚ùå –ù–µ –Ω–∞—à–ª–∏ <span> —Å —Ç–µ–∫—Å—Ç–æ–º ¬´{span_text}¬ª")
        return False

def apply_css_change_to_html(
    index_html_path: str,
    new_css_rule: str
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç CSS-–ø—Ä–∞–≤–∏–ª–∞ –≤ HTML-—Ñ–∞–π–ª–µ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      index_html_path: –ø—É—Ç—å –∫ HTML-—Ñ–∞–π–ª—É.
      new_css_rule: —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSS-–ø—Ä–∞–≤–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 
        ".foo { color: red; } .bar { font-size: 14px; }").
    –õ–æ–≥–∏–∫–∞:
      1) –†–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ new_css_rule –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ '}'.
      2) –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–ª–∏–∫–æ–º ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
      3) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞:
         a) –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä (—Ç–æ, —á—Ç–æ –¥–æ '{').
         b) –ò—â–µ—Ç –≤ <style> —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤–µ—Å—å –±–ª–æ–∫.
         c) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –≤ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ <style>,
            –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π <style> –≤ <head>.
      4) –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    # 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª
    rules = []
    for chunk in new_css_rule.split('}'):
        if '{' in chunk:
            rule = chunk.strip() + '}'
            # 2) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∏–¥–∞ /* ... */
            if not re.fullmatch(r"\s*/\*.*?\*/\s*", rule, re.DOTALL):
                rules.append(rule)

    if not rules:
        print("[CSS] –ü—É—Å—Ç–æ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.")
        return

    # 3) –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
    with open(index_html_path, "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    style_tags = soup.find_all("style")
    modified = False

    # 3a‚Äìc) –ü–æ –∫–∞–∂–¥–æ–π —á–∏—Å—Ç–æ–π –ø–∞—Ä–µ –ø—Ä–∞–≤–∏–ª–æ/—Å–µ–ª–µ–∫—Ç–æ—Ä
    for rule in rules:
        selector_match = re.match(r"^(.*?)\s*\{", rule, re.DOTALL)
        if not selector_match:
            continue
        selector = selector_match.group(1).strip()
        pattern = re.compile(
            rf"{re.escape(selector)}\s*\{{[^{{}}]*?\}}",
            re.DOTALL
        )

        replaced = False
        for tag in style_tags:
            css_text = tag.get_text() or ""
            if pattern.search(css_text):
                new_css = pattern.sub(rule, css_text)
                tag.string = new_css
                print(f"[CSS] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ¬´{selector}¬ª.")
                replaced = True
                modified = True
                break

        if not replaced:
            # 3c) –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
            snippet = "\n\n" + rule + "\n"
            if style_tags:
                last = style_tags[-1]
                last.string = (last.get_text() or "") + snippet
            else:
                head = soup.head or soup.new_tag("head")
                new_tag = soup.new_tag("style")
                new_tag.string = rule
                head.append(new_tag)
                if not soup.head:
                    soup.insert(0, head)
            print(f"[CSS] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ ¬´{selector}¬ª.")
            modified = True

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if modified:
        with open(index_html_path, "w", encoding="utf-8") as f:
            f.write(str(soup))
        print(f"‚úÖ[CSS] –§–∞–π–ª ¬´{index_html_path}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        print("[CSS] –ü—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Ñ–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω—ë–Ω.")

def apply_js_change(js_path, new_js_code):
    if new_js_code.strip().startswith("‚Äî") or not new_js_code.strip():
        print("[JS] –ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    with open(js_path, "a", encoding="utf-8") as f:
        f.write("\n\n" + new_js_code)
    print("[JS] –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤:", js_path)


def apply_all_changes(html_path, old_outer_html, llm_response, css_path, js_path):
    apply_html_change(html_path, old_outer_html, llm_response.get("new_html", ""))
    apply_css_change_to_html(css_path, llm_response.get("new_css", ""))
    apply_js_change(js_path, llm_response.get("new_js", ""))