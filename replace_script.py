from bs4 import BeautifulSoup
import re

def apply_html_change(html_path: str, old_html_block: str, new_html_block: str) -> bool:
    """
    –ò—â–µ—Ç –≤ HTML-—Ñ–∞–π–ª–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å old_html_block,
    –∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ new_html_block.

    Args:
        html_path (str): –ü—É—Ç—å –∫ HTML-—Ñ–∞–π–ª—É
        old_html_block (str): –°—Ç–∞—Ä—ã–π HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
        new_html_block (str): –ù–æ–≤—ã–π HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–º–µ–Ω—É

    Returns:
        bool: True, –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –∏–Ω–∞—á–µ False
    """

    # --- –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ HTML ---
    with open(html_path, "r", encoding="utf-8") as file:
        soup = BeautifulSoup(file, "html.parser")

    # --- –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ ---
    old_fragment = BeautifulSoup(old_html_block, "html.parser").find()
    new_fragment = BeautifulSoup(new_html_block, "html.parser").find()

    if old_fragment is None or new_fragment is None:
        print("‚ùå –û–¥–∏–Ω –∏–∑ –±–ª–æ–∫–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ HTML-—ç–ª–µ–º–µ–Ω—Ç–∞")
        return False

    # --- –®–∞–≥ 3: –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É ---
    for tag in soup.find_all(old_fragment.name):
        if str(tag).strip() == str(old_fragment).strip():
            print(f"üïµÔ∏è –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã:\n{tag}\n")

            tag.replace_with(new_fragment)
            with open(html_path, "w", encoding="utf-8") as file:
                file.write(str(soup))

            print("‚úÖ –ó–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return True

    print("‚ùå –°–æ–≤–ø–∞–¥–∞—é—â–∏–π HTML-–±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return False

def apply_css_change_to_html(
    index_html_path: str,
    new_css_rule: str
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç CSS-–ø—Ä–∞–≤–∏–ª–∞ –≤ HTML-—Ñ–∞–π–ª–µ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      index_html_path: –ø—É—Ç—å –∫ HTML-—Ñ–∞–π–ª—É.
      new_css_rule: —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSS-–ø—Ä–∞–≤–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 
        ".foo { color: red; } .bar { font-size: 14px; }").
    –õ–æ–≥–∏–∫–∞:
      1) –†–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ new_css_rule –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ '}'.
      2) –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–ª–∏–∫–æ–º ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
      3) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞:
         a) –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä (—Ç–æ, —á—Ç–æ –¥–æ '{').
         b) –ò—â–µ—Ç –≤ <style> —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤–µ—Å—å –±–ª–æ–∫.
         c) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –≤ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ <style>,
            –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π <style> –≤ <head>.
      4) –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    # 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª
    rules = []
    for chunk in new_css_rule.split('}'):
        if '{' in chunk:
            rule = chunk.strip() + '}'
            # 2) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∏–¥–∞ /* ... */
            if not re.fullmatch(r"\s*/\*.*?\*/\s*", rule, re.DOTALL):
                rules.append(rule)

    if not rules:
        print("[CSS] –ü—É—Å—Ç–æ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.")
        return

    # 3) –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
    with open(index_html_path, "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    style_tags = soup.find_all("style")
    modified = False

    # 3a‚Äìc) –ü–æ –∫–∞–∂–¥–æ–π —á–∏—Å—Ç–æ–π –ø–∞—Ä–µ –ø—Ä–∞–≤–∏–ª–æ/—Å–µ–ª–µ–∫—Ç–æ—Ä
    for rule in rules:
        selector_match = re.match(r"^(.*?)\s*\{", rule, re.DOTALL)
        if not selector_match:
            continue
        selector = selector_match.group(1).strip()
        pattern = re.compile(
            rf"{re.escape(selector)}\s*\{{[^{{}}]*?\}}",
            re.DOTALL
        )

        replaced = False
        for tag in style_tags:
            css_text = tag.get_text() or ""
            if pattern.search(css_text):
                new_css = pattern.sub(rule, css_text)
                tag.string = new_css
                print(f"[CSS] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ¬´{selector}¬ª.")
                replaced = True
                modified = True
                break

        if not replaced:
            # 3c) –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
            snippet = "\n\n" + rule + "\n"
            if style_tags:
                last = style_tags[-1]
                last.string = (last.get_text() or "") + snippet
            else:
                head = soup.head or soup.new_tag("head")
                new_tag = soup.new_tag("style")
                new_tag.string = rule
                head.append(new_tag)
                if not soup.head:
                    soup.insert(0, head)
            print(f"[CSS] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ ¬´{selector}¬ª.")
            modified = True

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if modified:
        with open(index_html_path, "w", encoding="utf-8") as f:
            f.write(str(soup))
        print(f"‚úÖ[CSS] –§–∞–π–ª ¬´{index_html_path}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        print("[CSS] –ü—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Ñ–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω—ë–Ω.")

def apply_js_change(js_path, new_js_code):
    if new_js_code.strip().startswith("‚Äî") or not new_js_code.strip():
        print("[JS] –ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    with open(js_path, "a", encoding="utf-8") as f:
        f.write("\n\n" + new_js_code)
    print("[JS] –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤:", js_path)


def apply_all_changes(html_path, old_outer_html, llm_response, css_path, js_path):
    apply_html_change(html_path, old_outer_html, llm_response.get("new_html", ""))
    apply_css_change_to_html(css_path, llm_response.get("new_css", ""))
    apply_js_change(js_path, llm_response.get("new_js", ""))