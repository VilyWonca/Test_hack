from pathlib import Path
from parser_utils import (
    parse_project_simple,
    load_all_css,
    load_all_js,
    analyze_dom_and_collect_context
)
from indexer_utils import create_css_index, render_css_index_for_llm
from context_builder import build_detailed_prompt, save_full_context_to_file
from pars_llm_ansver import parse_llm_response
from llm_client import call_llm
from replace_script import apply_html_change, apply_css_change_to_html

def main(user_command: str, snippets: list[str]):
    # üîπ –°–æ–±–∏—Ä–∞–µ–º —Å–Ω–∏–ø–ø–µ—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    combined_snippet = "\n".join(snippets)

    # üîπ –ü–∞–ø–∫–∞ —Å –≤—ã–≥—Ä—É–∑–∫–æ–π —Å–∞–π—Ç–∞ (–≥–¥–µ –ª–µ–∂–∞—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å HTML)
    root_path = "D:/1 My Work/2 ML/Workes/client_hack/ai-generator-dizmaketov/extractor/output/do-doors.ru/index.html"

    # üîπ –ò—â–µ–º index.html –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    proj = parse_project_simple(root_path)
    index_html_path = proj["index_html"]
    index_path = Path(index_html_path)

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º CSS –∏ JS
    css_dir = index_path.parent / "css"
    all_css = load_all_css(str(css_dir))
    all_js = load_all_js(proj["js_files"])

    # üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º DOM –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_data = analyze_dom_and_collect_context(
        index_html=str(index_path),
        all_css=all_css,
        all_js=all_js,
        selected_snippet=combined_snippet
    )
    save_full_context_to_file(context_data, "context_summary.txt")

    if not context_data["found_element"]:
        print("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ index.html")
        return

    # üîπ –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º CSS
    css_index = create_css_index(proj["css_files"])
    css_index_str = render_css_index_for_llm(css_index)

    # üîπ –°—Ç—Ä–æ–∏–º prompt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
    prompt_text = build_detailed_prompt(
        user_command=user_command,
        snippet=context_data["found_element"],
        parents=context_data["html_parents"],
        related_css=context_data["related_css"],
        related_js=context_data["related_js"],
        css_index_str=css_index_str
    )
    llm_answer = call_llm(prompt_text)
    print(f'–í–æ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç –ª–ª–º: {llm_answer}')

    def recall_ansver(prompt) -> str:
        rec_prompt = f'''
        –°–º–æ—Ç—Ä–∏ —Ç—ã —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—à—å –Ω–∞ –≤—Ö–æ–¥ –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–µ–π –ª–ª–º, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ç –¥–ª—è –º–µ–Ω—è –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ –≤–∏–¥–µ
        html,css,js.

        –í–æ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–ª–º:
        {llm_answer}
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Ä–∞–∑–¥–µ–ª–æ–º –∫–∞–∫ —Ç—É—Ç:
        ### New HTML Block
        <p style="text-align: left; color: green">–§—É—Ä–Ω–∏—Ç—É—Ä–∞</p>

        ### Additional CSS
        .t-name_lg p {{
            color: green;
        }}

        ### Additional JS
        ""

        ### Explanation
        "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π. –ü–æ—Å–∫–æ–ª—å–∫—É –∏—Å—Ö–æ–¥–Ω—ã–π HTML-–±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–ª –∏–Ω–ª–∞–π–Ω–æ–≤—ã–π —Å—Ç–∏–ª—å, –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å –Ω–∞–ø—Ä—è–º—É—é, –¥–æ–±–∞–≤–∏–≤ `color: green`."
        '''
        return call_llm(rec_prompt)

    final_answer = recall_ansver(llm_answer)
    print(f"–í–æ—Ç –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ª–ª–º: {final_answer}")

    parsed = parse_llm_response(final_answer)
    print(f"–í–æ—Ç —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {parsed}")
    print(f"–í–æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: {context_data['html_parents']}")

    # üîπ HTML: –æ–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ
    apply_html_change(root_path, context_data["found_element"], parsed["new_html"])

    # üîπ CSS: –æ–±–Ω–æ–≤–ª—è–µ–º <style> –≤–Ω—É—Ç—Ä–∏ HTML
    apply_css_change_to_html(str(index_path.parent), parsed["new_css"])

    return parsed["explanation"]
